# shellcheck shell=dash

xrc:mod:lib pkg     sphere/xbin

# x pkg snap -n nmap -v v7.92 nmap --version
# x pkg snap nping --version
___x_cmd_pkg_sphere_snap(){
    local op="$1"
    case "$op" in
        exec|ensure_execfp|gen_execfp)
                    shift; ___x_cmd_pkg_sphere_snap___"$op" "$@" ;;
        *)          ___x_cmd_pkg_sphere_snap___exec "$@" ;;
    esac
}

___x_cmd_pkg_sphere_snap___exec(){
    local X_help_cmd='___x_cmd help -m pkg sphere snap'
    local sphere_name=; local osarch=
    local name=; local version=; local sociality
    while [ "$#" -gt 0 ]; do
        case "$1" in
            --sphere)
                    sphere_name="$2";
                    [ -n "$sphere_name" ] || M="Provide a sphere name" N=pkg log:ret:1
                    shift 2
                    ;;
            --sphereroot)
                    local ___X_CMD_PKG_ROOT_SPHERE="$2"
                    [ -n "$___X_CMD_PKG_ROOT_SPHERE" ] || M="Provide sphere root path" N=pkg log:ret:1
                    shift 2
                    ;;
            --osarch)
                    osarch="$2";        [ -n "$2" ] || N=pkg M="Provide osarch value" log:ret:1
                    shift 2 ;;
            -v|--version)
                    version="$2";       [ -n "$2" ] || N=pkg M="Provide a package version" log:ret:1
                    shift 2 ;;
            -n|--name)
                    name="$2";          [ -n "$2" ] || N=pkg M="Provide a package name" log:ret:1
                    shift 2 ;;
            --sociality)
                    sociality="$2";     [ -n "$2" ] || N=pkg M="Provide sociality value" log:ret:1
                    shift 2 ;;
            -h|--help)
                    help:show:ret:0 ;;
            *)      break ;;
        esac
    done

    [ -n "$osarch" ]    || { ___x_cmd_pkg_osarch_ || return 1; osarch="$___X_CMD_PKG_OSARCH"; } || N=pkg M="Not found osarch" log:ret:1
    sphere_name="${sphere_name:-"X"}"

    local x_=
    local binname="$1";
    [ -n "$binname" ]   || N=pkg M="Provide a bin name" log:ret:1
    shift

    [ -n "$name" ]      || {
        name="$binname"
        # x_=""; ___x_cmd_pkg_sphere_xbin_get_binmod_name_ "$binname" || return $?
        # name="$x_"
        [ -n "$name" ]  || N=pkg M="Not found package name for $binname" log:ret:1
    }

    local binpath=
    local execfile="${___X_CMD_ROOT_PKG_EXEC_BINPATH}/${binname}"
    if [ -f "$execfile" ]; then
        if ___x_cmd_readr binpath <"$execfile" && [ -x "$binpath" ]; then
            "$binpath" "$@"
            return
        fi
    fi

    ___x_cmd_pkg_sphere_snap___ensure_execfp \
        --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
        --osarch "$osarch" "$name" "$version" "$sociality" || return $?

    [ -f "$execfile" ] || {
        pkg:error "Not found exec filepath for $binname"
        return 1
    }

    if ___x_cmd_readr binpath <"$execfile" && [ -x "$binpath" ]; then
        "$binpath" "$@"
        return
    fi
}

___x_cmd_pkg_sphere_snap___ensure_execfp(){
    pkg:sphere:parse:args
    local sociality="$1"

    ___x_cmd_pkg_sphere add --prebuild  \
        --reason "snap,protect"   \
        --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
        --osarch "$osarch" "$name" "$version" || return $?

    ___x_cmd_pkg_sphere_snap___gen_execfp \
        --sphere "$sphere_name" --sphereroot "$___X_CMD_PKG_ROOT_SPHERE" \
        --osarch "$osarch" "$name" "$version" "$sociality"
}

___x_cmd_pkg_sphere_snap___gen_execfp(){
    pkg:sphere:parse:args
    local sociality="$1"

    local x_treename=; ___x_cmd_pkg_treename_ "$name" "$version" "$osarch" || return $?
    local tgt="$___X_CMD_PKG_ROOT_SPHERE/$sphere_name/$x_treename/$name/$version"

    local path_list; path_list="$( ___x_cmd_pkg_sphere_link list_all_path_expand "$name" "$version" "$osarch" "$tgt" bin "$sociality" )" || return $?
    [ -n "$path_list" ] || {
        pkg:warn "Not found path list for $name $version"
        return 1
    }

    local execdir="$___X_CMD_ROOT_PKG_EXEC_BINPATH"
    ___x_cmd mkdirp "$execdir"

    local bin_path=
    local bin_name=
    while ___x_cmd_readr bin_path; do
        bin_name="${bin_path##*/}"
        printf "%s\n" "$bin_path" > "$execdir/$bin_name"
        pkg:debug "Generate the exec file for $bin_name -> $execdir/$bin_name"
        ___x_cmd_cmds chmod +x "$bin_path" || {
            pkg:error "Cannot use chmod on $bin_path"
            return 1
        }
    done <<A
$path_list
A
}

