# shellcheck shell=sh   disable=SC3043,SC1090,SC1091


___x_cmd_ws_locatefp_(){
    local cur="${1:?Provide starting path}"
    x_=; ___x_cmd_abspath_ "$cur" || return $?
    cur="$x_"; x_=""

    local parent=""
    local relative_filepath="${2:?Provide relative filepath}"
    while [ ! "$cur" = "" ]; do
        # shellcheck disable=SC1009,SC1072,SC1073
        x_="$cur/${relative_filepath}";         [ ! -e "$x_" ] || return 0

        x_="$cur/${relative_filepath}.go";      [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.zig";     [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.c";       [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.cpp";     [ ! -e "$x_" ] || return 0

        x_="$cur/${relative_filepath}.js";      [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.ts";      [ ! -e "$x_" ] || return 0

        x_="$cur/${relative_filepath}.py";      [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.mojo";    [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.jl";      [ ! -e "$x_" ] || return 0

        x_="$cur/${relative_filepath}.hy";      [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.el";      [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.lisp";    [ ! -e "$x_" ] || return 0

        x_="$cur/${relative_filepath}.pl";      [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.raku";    [ ! -e "$x_" ] || return 0

        x_="$cur/${relative_filepath}.rb";      [ ! -e "$x_" ] || return 0

        x_="$cur/${relative_filepath}.java";    [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.scala";   [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.groovy";  [ ! -e "$x_" ] || return 0
        x_="$cur/${relative_filepath}.kt";      [ ! -e "$x_" ] || return 0

        parent="${cur%/*}"
        [ "$parent" != "$cur" ] || return 1
        cur="$parent"
    done
    x_=""
    return 1
}



___x_cmd_ws_exec(){
    local x_
    if [ -z "$1" ]; then
        if ___x_cmd locatefolder_ . ".x-cmd/ws"; then
            ___x_cmd_ws___exe_workspace "$x_/.x-cmd/ws"
            return
        else
            printf "%s\n" "Cannot find .x-cmd/ws" >&2
            return 1
        fi
    fi

    local RESOURCE_NAME="$1"; shift
    if ___x_cmd_ws_locatefp_ . ".x-cmd/$RESOURCE_NAME"; then
        ___x_cmd_ws___exe_workspace "$x_" "$@"
        return
    elif ___x_cmd locatefolder_ . ".x-cmd/ws"; then     # Deprecated
        ___x_cmd_ws___exe_workspace "$x_/.x-cmd/ws" "$RESOURCE_NAME" "$@"
    elif ___x_cmd locatefolder_ . ".x-cmd/X"; then
        ___x_cmd_ws___exe_workspace "$x_/.x-cmd/X" "$RESOURCE_NAME" "$@"
    # elif ___x_cmd_advise hascmd x git "$RESOURCE_NAME"; then
    #     ___x_cmd_git "$RESOURCE_NAME" "$@"
    else
        # ___x_cmd_ws___run_default
        ___x_cmd_ws___projecttype_ "" || return

        local ___X_CMD_WS___EXE_DEFAULT_TMP="$x_"
        if [ "$___X_CMD_WS___EXE_DEFAULT_TMP_LAST" != "$___X_CMD_WS___EXE_DEFAULT_TMP" ]; then
            ___X_CMD_WS___EXE_DEFAULT_TMP_LAST="$___X_CMD_WS___EXE_DEFAULT_TMP"
            . "$___X_CMD_ROOT_MOD/ws/lib/default/_"
        fi
        ___x_cmd_ws___run_default "$___X_CMD_WS___EXE_DEFAULT_TMP_LAST" "$@"

        # name="___x_cmd_ws___exe_default___${___X_CMD_WS___EXE_DEFAULT_TMP_LAST}_has"
        # command -v $name 2>/dev/null && $name "$RESOURCE_NAME" || return 1
        # echo ""
        # return 1
    fi
}

# TODO: run
# 1. check node_modules folder are older than the package.json
# Or check the install folder are older than the file
# 2. run the main file

___x_cmd_ws___projecttype_(){
    local x_="$1"
    [ -z "$x_" ] || {
        local ___X_CMD_WSROOT_;     ___x_cmd wsroot_
    }

    if   [ -f "${x_}/setup.py" ];         then    x_=python
    elif [ -f "${x_}/tsconfig.json" ];    then    x_=typescript
    elif [ -f "${x_}/package.json" ];     then    x_=node
    elif [ -f "${x_}/gosum" ];            then    x_=go
    elif [ -f "${x_}/build.kt" ];         then    x_=java/gradle/kotlin
    elif [ -f "${x_}/build.gradle" ];     then    x_=java/gradle
    elif [ -f "${x_}/pom.xml" ];          then    x_=java/maven
    elif [ -d "${x_}/lua_modules" ];      then    x_=lua

    else
        x_=
        ws:error "No default script found in this environment."
        return 1
    fi
}

