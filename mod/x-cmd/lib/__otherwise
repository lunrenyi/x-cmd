
___X_CMD___OTHERWISE_LOADED=1

___x_cmd_main___otherwise(){
    local op="$1";  shift
    case "$op" in
        i)                                  ___x_cmd_main   install                 "$@" ;;
        uni|uno|arg1|arg2|join|prln)        ___x_cmd_main   line            "$op"   "$@" ;;
        md5|sha1|sha256|sha384|sha512)      ___x_cmd_main   hash            "$op"   "$@" ;;
        base64|unbase64)                    ___x_cmd_cmds                   "$op"   "$@" ;;
        # deprecated readl|rl ...
        readl|rl)                           ___x_cmd_readl                          "$@" ;;
        readeval|reval)                     ___x_cmd_reval                          "$@" ;;
        login)                              ___x_cmd_main   hub login               "$@" ;;

        sh|ksh|ash)                         ___x_cmd_main   shellengine     "$op"   "$@" ;;
        z|uz|uzr)                           ___x_cmd_main   zuz             "$op"   "$@" ;;

        o)                                  ___x_cmd_main   open                    "$@" ;;

        run)                                ___x_cmd solo   --exec                  "$@" ;;

        unix2dos|unix2mac|mac2unix|mac2dos|dos2mac)
                                            ___x_cmd dos2unix --"$op"               "$@" ;;

        *)                                  ___x_cmd_main___otherwise_other "$op"   "$@" ;;
    esac
}

___x_cmd_main_otherwise_which(){
    # Notice: ___X_CMD_NO_LOCAL=1 we should accept the local file
    local ___X_CMD_NO_LOCAL=1
    case "$op" in
        */*|*\.*)       ___X_CMD_NO_LOCAL= ;;
    esac
    ___x_cmd_which_one "$op" 2>/dev/null
}

___x_cmd_main___otherwise_other(){
    local op="$1";   shift

    [ ! -f "$___X_CMD_ROOT_MOD/cosmo/lib/mod/$op" ] || {
        . "$___X_CMD_ROOT_MOD/cosmo/lib/mod/$op"
        "___x_cmd_${op}" "$@" ;     return
    }

    local ___x_cmd_main_otherwise_code

    local ___X_CMD_WHICH_ONE_RESULT
    local ___X_CMD_WHICH_ONE_RESOURCE_TYPE

    if ___x_cmd_main_otherwise_which; then
        x:debug "Executing Resource [type=$___X_CMD_WHICH_ONE_RESOURCE_TYPE] [file=$___X_CMD_WHICH_ONE_RESULT]"
        case "$___X_CMD_WHICH_ONE_RESOURCE_TYPE" in
            # workspace)      ___x_cmd_exe_workspace  "$___X_CMD_WHICH_ONE_RESULT" "$@" ;;
            local)          ___x_cmd solo run   "$___X_CMD_WHICH_ONE_RESULT" "$@" ;;
            *)              ___x_cmd solo run   "$___X_CMD_WHICH_ONE_RESULT" "$@" ;;
        esac
        ___x_cmd_main_otherwise_code=$?
        x:debug "Resource Executed [type=$___X_CMD_WHICH_ONE_RESOURCE_TYPE] [file=$___X_CMD_WHICH_ONE_RESULT] [code=$___x_cmd_main_otherwise_code]"
        return "$___x_cmd_main_otherwise_code"
    fi

    # reference: https://github.com/x-bash/pkg/pull/59
    local ___X_CMD_STR___DASH2UNDERLINE=; ___x_cmd_str___dash2underline "$op"
    # TODO: deprecated. We should avoid this.
    if command -v "___x_cmd_${___X_CMD_STR___DASH2UNDERLINE}" 2>/dev/null 1>&2; then
        "___x_cmd_${___X_CMD_STR___DASH2UNDERLINE}" "$@"
        return
    fi

    # TODO: If we fail to introduct from xbin. Please provide the interface, ask user for what he/she wants and whether set the alias for that module globally.
    ___x_cmd_main_otherwise_code=$?
    if ___x_cmd pkg xbin init "$op"; then
        "___x_cmd_${___X_CMD_STR___DASH2UNDERLINE}" "$@"
        return
    fi

    x:error "___x_cmd_which_one fail [code=${___x_cmd_main_otherwise_code}]"
    return 1
}

