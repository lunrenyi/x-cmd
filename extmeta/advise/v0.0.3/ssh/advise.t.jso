{
"-4"
:
{
"#desc"
:
{
"en"
:
"Forces ssh to use IPv4 addresses only."
,
"cn"
:
"强制 ssh 仅使用 IPv4 地址。"
}
}
,
"-6"
:
{
"#desc"
:
{
"en"
:
"Forces ssh to use IPv6 addresses only."
,
"cn"
:
"强制 ssh 仅使用 IPv6 地址。"
}
}
,
"-A"
:
{
"#desc"
:
{
"en"
:
"Enables forwarding of connections from an authentication agent such as ssh-agent(1). This can also be specified on a per-host basis in a configuration file. Agent forwarding should be enabled with caution. Users with the ability to bypass file permissions on the remote host (for the agent's UNIX-domain socket) can access the local agent through the forwarded connection. An attacker cannot obtain key material from the agent, however they can perform operations on the keys that enable them to authenticate using the identities loaded into the agent. A safer alternative may be to use a jump host (see -J)."
,
"cn"
:
"启用从身份验证代理（如 ssh-agent(1)）转发连接。这也可以在配置文件中按主机指定。代理转发应谨慎启用。具有绕过远程主机上文件权限能力的用户（针对代理的 UNIX 域套接字）可以通过转发连接访问本地代理。攻击者无法从代理中获取密钥材料，但他们可以对密钥执行操作，使其能够使用加载到代理中的身份进行身份验证。更安全的替代方案可能是使用跳转主机（见 -J）。"
}
}
,
"-a"
:
{
"#desc"
:
{
"en"
:
"Disables forwarding of the authentication agent connection."
,
"cn"
:
"禁用身份验证代理连接的转发。"
}
}
,
"-C"
:
{
"#desc"
:
{
"en"
:
"Requests compression of all data (including stdin, stdout, stderr, and data for forwarded X11, TCP and UNIX-domain connections). The compression algorithm is the same used by gzip(1). Compression is desirable on modem lines and other slow connections, but will only slow down things on fast networks. The default value can be set on a host-by-host basis in the configuration files; see the Compression option."
,
"cn"
:
"请求压缩所有数据（包括 stdin、stdout、stderr 以及转发的 X11、TCP 和 UNIX 域连接的数据）。压缩算法与 gzip(1) 使用的算法相同。在调制解调器线路和其他慢速连接上，压缩是可取的，但在快速网络上会减慢速度。默认值可以在配置文件中逐主机设置；请参见 Compression 选项。"
}
}
,
"-f"
:
{
"#desc"
:
{
"en"
:
"Requests ssh to go to background just before command execution. This is useful if ssh is going to ask for passwords or passphrases, but the user wants it in the background. This implies -n. The recommended way to start X11 programs at a remote site is with something like ssh -f host xterm. If the ExitOnForwardFailure configuration option is set to “yes”, then a client started with -f will wait for all remote port forwards to be successfully established before placing itself in the background."
,
"cn"
:
"请求 ssh 在命令执行前转到后台。如果 ssh 要求输入密码或密语，但用户希望它在后台运行，这非常有用。这意味着 -n。启动远程站点上的 X11 程序的推荐方法是使用类似 ssh -f host xterm 的命令。如果 ExitOnForwardFailure 配置选项设置为 “yes”，则使用 -f 启动的客户端将在将自身置于后台之前等待所有远程端口转发成功建立。"
}
}
,
"-G"
:
{
"#desc"
:
{
"en"
:
"Causes ssh to print its configuration after evaluating Host and Match blocks and exit."
,
"cn"
:
"使 ssh 在评估 Host 和 Match 块后打印其配置并退出。"
}
}
,
"-g"
:
{
"#desc"
:
{
"en"
:
"Allows remote hosts to connect to local forwarded ports. If used on a multiplexed connection, then this option must be specified on the master process."
,
"cn"
:
"允许远程主机连接到本地转发的端口。如果在复用连接上使用，则必须在主进程上指定此选项。"
}
}
,
"-K"
:
{
"#desc"
:
{
"en"
:
"Enables GSSAPI-based authentication and forwarding (delegation) of GSSAPI credentials to the server."
,
"cn"
:
"启用基于 GSSAPI 的身份验证和 GSSAPI 凭据的转发（委派）到服务器。"
}
}
,
"-k"
:
{
"#desc"
:
{
"en"
:
"Disables forwarding (delegation) of GSSAPI credentials to the server."
,
"cn"
:
"禁用 GSSAPI 凭据的转发（委派）到服务器。"
}
}
,
"-M"
:
{
"#desc"
:
{
"en"
:
"Places the ssh client into “master” mode for connection sharing. Multiple -M options places ssh into “master” mode but with confirmation required using ssh-askpass(1) before each operation that changes the multiplexing state (e.g. opening a new session). Refer to the description of ControlMaster in ssh_config(5) for details."
,
"cn"
:
"将 ssh 客户端置于“主模式”以进行连接共享。多个 -M 选项将 ssh 置于“主模式”，但在每次更改复用状态的操作（例如打开新会话）之前需要使用 ssh-askpass(1) 进行确认。有关详细信息，请参阅 ssh_config(5) 中的 ControlMaster 描述。"
}
}
,
"-N"
:
{
"#desc"
:
{
"en"
:
"Do not execute a remote command. This is useful for just forwarding ports."
,
"cn"
:
"不执行远程命令。这对仅转发端口非常有用。"
}
}
,
"-n"
:
{
"#desc"
:
{
"en"
:
"Redirects stdin from /dev/null (actually, prevents reading from stdin). This must be used when ssh is run in the background. A common trick is to use this to run X11 programs on a remote machine. For example, ssh -n shadows.cs.hut.fi emacs & will start an emacs on shadows.cs.hut.fi, and the X11 connection will be automatically forwarded over an encrypted channel. The ssh program will be put in the background. (This does not work if ssh needs to ask for a password or passphrase; see also the -f option.)"
,
"cn"
:
"从 /dev/null 重定向 stdin（实际上，防止从 stdin 读取）。当 ssh 在后台运行时必须使用此选项。一个常见的技巧是使用此选项在远程机器上运行 X11 程序。例如，ssh -n shadows.cs.hut.fi emacs & 将在 shadows.cs.hut.fi 上启动 emacs，并且 X11 连接将自动通过加密通道转发。ssh 程序将置于后台。（如果 ssh 需要询问密码或密语，则此方法无效；另请参见 -f 选项。）"
}
}
,
"-q"
:
{
"#desc"
:
{
"en"
:
"Quiet mode. Causes most warning and diagnostic messages to be suppressed."
,
"cn"
:
"安静模式。导致大多数警告和诊断消息被抑制。"
}
}
,
"-s"
:
{
"#desc"
:
{
"en"
:
"May be used to request invocation of a subsystem on the remote system. Subsystems facilitate the use of SSH as a secure transport for other applications (e.g. sftp(1)). The subsystem is specified as the remote command."
,
"cn"
:
"可用于请求在远程系统上调用子系统。子系统促进了将 SSH 用作其他应用程序（例如 sftp(1)）的安全传输。子系统指定为远程命令。"
}
}
,
"-T"
:
{
"#desc"
:
{
"en"
:
"Disable pseudo-terminal allocation."
,
"cn"
:
"禁用伪终端分配。"
}
}
,
"-t"
:
{
"#desc"
:
{
"en"
:
"Force pseudo-terminal allocation. This can be used to execute arbitrary screen-based programs on a remote machine, which can be very useful, e.g. when implementing menu services. Multiple -t options force tty allocation, even if ssh has no local tty."
,
"cn"
:
"强制伪终端分配。这可以用于在远程机器上执行任意基于屏幕的程序，这非常有用，例如在实现菜单服务时。多个 -t 选项强制分配 tty，即使 ssh 没有本地 tty。"
}
}
,
"-V"
:
{
"#desc"
:
{
"en"
:
"Display the version number and exit."
,
"cn"
:
"显示版本号并退出。"
}
}
,
"-v"
:
{
"#desc"
:
{
"en"
:
"Verbose mode. Causes ssh to print debugging messages about its progress. This is helpful in debugging connection, authentication, and configuration problems. Multiple -v options increase the verbosity. The maximum is 3."
,
"cn"
:
"启用详细模式。使 ssh 打印关于其进展的调试消息。这在调试连接、身份验证和配置问题时很有帮助。多个 -v 选项会增加详细程度，最大为 3。"
}
,
"#1"
:
null
}
,
"-X"
:
{
"#desc"
:
{
"en"
:
"Enables X11 forwarding. This can also be specified on a per-host basis in a configuration file. X11 forwarding should be enabled with caution. Users with the ability to bypass file permissions on the remote host (for the user's X authorization database) can access the local X11 display through the forwarded connection. An attacker may then be able to perform activities such as keystroke monitoring. For this reason, X11 forwarding is subjected to X11 SECURITY extension restrictions by default. Please refer to the ssh -Y option and the ForwardX11Trusted directive in ssh_config(5) for more information. (Debian-specific: X11 forwarding is not subjected to X11 SECURITY extension restrictions by default, because too many programs currently crash in this mode. Set the ForwardX11Trusted option to “no” to restore the upstream behaviour. This may change in future depending on client-side improvements.)"
,
"cn"
:
"启用 X11 转发。这也可以在配置文件中按主机指定。X11 转发应谨慎启用。具有绕过远程主机上文件权限的能力的用户（用于用户的 X 授权数据库）可以通过转发的连接访问本地 X11 显示。攻击者可能会进行如按键监控等活动。因此，默认情况下，X11 转发受到 X11 SECURITY 扩展限制。有关更多信息，请参见 ssh -Y 选项和 ssh_config(5) 中的 ForwardX11Trusted 指令。（Debian 特定：由于当前有太多程序在此模式下崩溃，因此 X11 转发默认不受 X11 SECURITY 扩展限制。将 ForwardX11Trusted 选项设置为 “no” 以恢复上游行为。根据客户端改进，这可能会在未来发生变化。）"
}
,
"#1"
:
null
}
,
"-x"
:
{
"#desc"
:
{
"en"
:
"Disables X11 forwarding."
,
"cn"
:
"禁用 X11 转发。"
}
,
"#1"
:
null
}
,
"-Y"
:
{
"#desc"
:
{
"en"
:
"Enables trusted X11 forwarding. Trusted X11 forwardings are not subjected to the X11 SECURITY extension controls. (Debian-specific: In the default configuration, this option is equivalent to -X, since ForwardX11Trusted defaults to “yes” as described above. Set the ForwardX11Trusted option to “no” to restore the upstream behaviour. This may change in future depending on client-side improvements.)"
,
"cn"
:
"启用受信任的 X11 转发。受信任的 X11 转发不受 X11 SECURITY 扩展控制。（Debian 特定：在默认配置中，此选项等同于 -X，因为 ForwardX11Trusted 默认设置为 “yes”。将 ForwardX11Trusted 选项设置为 “no” 以恢复上游行为。根据客户端改进，这可能会在未来发生变化。）"
}
,
"#1"
:
null
}
,
"-y"
:
{
"#desc"
:
{
"en"
:
"Send log information using the syslog(3) system module. By default this information is sent to stderr."
,
"cn"
:
"使用 syslog(3) 系统模块发送日志信息。默认情况下，此信息发送到 stderr。"
}
,
"#1"
:
null
}
,
"-B"
:
{
"#desc"
:
{
"en"
:
"Bind to the address of bind_interface before attempting to connect to the destination host. This is only useful on systems with more than one address."
,
"cn"
:
"在尝试连接到目标主机之前绑定到 bind_interface 的地址。这仅在具有多个地址的系统上有用。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"bind_interface"
,
"cn"
:
"bind_interface"
}
}
}
,
"-b"
:
{
"#desc"
:
{
"en"
:
"Use bind_address on the local machine as the source address of the connection. Only useful on systems with more than one address."
,
"cn"
:
"使用 bind_address 作为连接的源地址，仅在具有多个地址的系统上有用。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"bind_address"
,
"cn"
:
"bind_address"
}
}
}
,
"-c"
:
{
"#desc"
:
{
"en"
:
"Selects the cipher specification for encrypting the session. cipher_spec is a comma-separated list of ciphers listed in order of preference. See the Ciphers keyword in ssh_config(5) for more information."
,
"cn"
:
"选择用于加密会话的密码规范。cipher_spec 是按偏好顺序列出的逗号分隔的密码列表。有关更多信息，请参见 ssh_config(5) 中的 Ciphers 关键字。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"cipher_spec"
,
"cn"
:
"cipher_spec"
}
}
}
,
"-D"
:
{
"#desc"
:
{
"en"
:
"Specifies a local “dynamic” application-level port forwarding. This works by allocating a socket to listen to port on the local side, optionally bound to the specified bind_address. Whenever a connection is made to this port, the connection is forwarded over the secure channel, and the application protocol is then used to determine where to connect to from the remote machine. Currently the SOCKS4 and SOCKS5 protocols are supported, and ssh will act as a SOCKS server. Only root can forward privileged ports. Dynamic port forwardings can also be specified in the configuration file. IPv6 addresses can be specified by enclosing the address in square brackets. Only the superuser can forward privileged ports. By default, the local port is bound in accordance with the GatewayPorts setting. However, an explicit bind_address may be used to bind the connection to a specific address. The bind_address of “localhost” indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates that the port should be available from all interfaces."
,
"cn"
:
"指定本地“动态”应用级端口转发。这通过分配一个套接字来监听本地端口，选项上绑定到指定的 bind_address。每当有连接到该端口时，连接都会通过安全通道转发，应用程序协议随后用于确定从远程机器连接到哪里。目前支持 SOCKS4 和 SOCKS5 协议，ssh 将充当 SOCKS 服务器。只有 root 可以转发特权端口。动态端口转发也可以在配置文件中指定。IPv6 地址可以通过将地址括在方括号中来指定。只有超级用户可以转发特权端口。默认情况下，本地端口根据 GatewayPorts 设置绑定。然而，可以使用显式的 bind_address 将连接绑定到特定地址。bind_address 为 “localhost” 表示监听端口仅绑定到本地使用，而空地址或 ‘*’ 表示端口应从所有接口可用。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"[bind_address:]port"
,
"cn"
:
"[bind_address:]port"
}
}
}
,
"-E"
:
{
"#desc"
:
{
"en"
:
"Append debug logs to log_file instead of standard error."
,
"cn"
:
"将调试日志追加到 log_file，而不是标准错误。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"log_file"
,
"cn"
:
"log_file"
}
}
}
,
"-e"
:
{
"#desc"
:
{
"en"
:
"Sets the escape character for sessions with a pty (default: ‘~’). The escape character is only recognized at the beginning of a line. The escape character followed by a dot (‘.’) closes the connection; followed by control-Z suspends the connection; and followed by itself sends the escape character once. Setting the character to “none” disables any escapes and makes the session fully transparent."
,
"cn"
:
"为具有 pty 的会话设置转义字符（默认值：‘~’）。转义字符仅在行的开头被识别。转义字符后跟点（‘.’）关闭连接；后跟控制-Z 挂起连接；后跟自身则发送一次转义字符。将字符设置为“none”会禁用所有转义，使会话完全透明。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"escape_char"
,
"cn"
:
"escape_char"
}
}
}
,
"-F"
:
{
"#desc"
:
{
"en"
:
"Specifies an alternative per-user configuration file. If a configuration file is given on the command line, the system-wide configuration file (/etc/ssh/ssh_config) will be ignored. The default for the per-user configuration file is ~/.ssh/config."
,
"cn"
:
"指定替代的每用户配置文件。如果在命令行中给出了配置文件，则会忽略系统范围的配置文件 (/etc/ssh/ssh_config)。每用户配置文件的默认值是 ~/.ssh/config。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"configfile"
,
"cn"
:
"configfile"
}
}
}
,
"-I"
:
{
"#desc"
:
{
"en"
:
"Specify the PKCS#11 shared library ssh should use to communicate with a PKCS#11 token providing keys for user authentication."
,
"cn"
:
"指定 ssh 应使用的 PKCS#11 共享库，以与提供用户身份验证密钥的 PKCS#11 令牌进行通信。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"pkcs11"
,
"cn"
:
"pkcs11"
}
}
}
,
"-i"
:
{
"#desc"
:
{
"en"
:
"Selects a file from which the identity (private key) for public key authentication is read. The default is ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ecdsa_sk, ~/.ssh/id_ed25519, ~/.ssh/id_ed25519_sk and ~/.ssh/id_rsa. Identity files may also be specified on a per-host basis in the configuration file. It is possible to have multiple -i options (and multiple identities specified in configuration files). If no certificates have been explicitly specified by the CertificateFile directive, ssh will also try to load certificate information from the filename obtained by appending -cert.pub to identity filenames."
,
"cn"
:
"选择一个文件，从中读取用于公钥身份验证的身份（私钥）。默认值是 ~/.ssh/id_dsa、~/.ssh/id_ecdsa、~/.ssh/id_ecdsa_sk、~/.ssh/id_ed25519、~/.ssh/id_ed25519_sk 和 ~/.ssh/id_rsa。身份文件也可以在配置文件中按主机指定。可以有多个 -i 选项（以及在配置文件中指定多个身份）。如果未通过 CertificateFile 指令显式指定证书，ssh 还将尝试从通过在身份文件名后附加 -cert.pub 获得的文件名中加载证书信息。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"identity_file"
,
"cn"
:
"identity_file"
}
}
}
,
"-J"
:
{
"#desc"
:
{
"en"
:
"Connect to the target host by first making a ssh connection to the jump host described by destination and then establishing a TCP forwarding to the ultimate destination from there. Multiple jump hops may be specified separated by comma characters. This is a shortcut to specify a ProxyJump configuration directive. Note that configuration directives supplied on the command-line generally apply to the destination host and not any specified jump hosts. Use ~/.ssh/config to specify configuration for jump hosts."
,
"cn"
:
"通过首先建立到目标主机的 ssh 连接，然后从跳转主机到最终目标建立 TCP 转发来连接到目标主机。可以用逗号分隔的多个跳转主机。此选项是指定 ProxyJump 配置指令的快捷方式。请注意，命令行中提供的配置指令通常适用于目标主机，而不是任何指定的跳转主机。使用 ~/.ssh/config 来指定跳转主机的配置。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"destination"
,
"cn"
:
"destination"
}
}
}
,
"-L"
:
{
"#desc"
:
{
"en"
:
"Specifies that connections to the given TCP port or Unix socket on the local (client) host are to be forwarded to the given host and port, or Unix socket, on the remote side. This works by allocating a socket to listen to either a TCP port on the local side, optionally bound to the specified bind_address, or to a Unix socket. Whenever a connection is made to the local port or socket, the connection is forwarded over the secure channel, and a connection is made to either host port hostport, or the Unix socket remote_socket, from the remote machine. Port forwardings can also be specified in the configuration file. Only the superuser can forward privileged ports. IPv6 addresses can be specified by enclosing the address in square brackets. By default, the local port is bound in accordance with the GatewayPorts setting. However, an explicit bind_address may be used to bind the connection to a specific address. The bind_address of “localhost” indicates that the listening port be bound for local use only, while an empty address or ‘*’ indicates that the port should be available from all interfaces."
,
"cn"
:
"指定将本地（客户端）主机上的给定 TCP 端口或 Unix 套接字的连接转发到远程主机上的给定主机和端口或 Unix 套接字。这通过分配一个套接字来监听本地端口（可选地绑定到指定的 bind_address）或 Unix 套接字来实现。每当有连接到本地端口或套接字时，连接都会通过安全通道转发，并从远程机器建立到主机端口 hostport 或 Unix 套接字 remote_socket 的连接。端口转发也可以在配置文件中指定。只有超级用户可以转发特权端口。IPv6 地址可以通过将地址括在方括号中来指定。默认情况下，本地端口根据 GatewayPorts 设置绑定。然而，可以使用显式的 bind_address 将连接绑定到特定地址。bind_address 为 “localhost” 表示监听端口仅绑定到本地使用，而空地址或 ‘*’ 表示端口应从所有接口可用。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"[bind_address:]port:host:hostport [bind_address:]port:remote_socket local_socket:host:hostport local_socket:remote_socket"
,
"cn"
:
"[bind_address:]port:host:hostport [bind_address:]port:remote_socket local_socket:host:hostport local_socket:remote_socket"
}
}
}
,
"-l"
:
{
"#desc"
:
{
"en"
:
"Specifies the user to log in as on the remote machine. This also may be specified on a per-host basis in the configuration file."
,
"cn"
:
"指定在远程机器上登录的用户。这也可以在配置文件中按主机指定。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"login_name"
,
"cn"
:
"login_name"
}
}
}
,
"-m"
:
{
"#desc"
:
{
"en"
:
"A comma-separated list of MAC (message authentication code) algorithms, specified in order of preference. See the MACs keyword for more information."
,
"cn"
:
"以逗号分隔的 MAC（消息认证码）算法列表，按优先顺序指定。有关更多信息，请参见 MACs 关键字。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"mac_spec"
,
"cn"
:
"mac_spec"
}
}
}
,
"-O"
:
{
"#desc"
:
{
"en"
:
"Control an active connection multiplexing master process. When the -O option is specified, the ctl_cmd argument is interpreted and passed to the master process. Valid commands are: “check” (check that the master process is running), “forward” (request forwardings without command execution), “cancel” (cancel forwardings), “exit” (request the master to exit), and “stop” (request the master to stop accepting further multiplexing requests)."
,
"cn"
:
"控制一个活动的连接复用主进程。当指定 -O 选项时，ctl_cmd 参数会被解释并传递给主进程。有效的命令有：“check”（检查主进程是否正在运行）、“forward”（请求转发而不执行命令）、“cancel”（取消转发）、“exit”（请求主进程退出）和“stop”（请求主进程停止接受更多的复用请求）。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"ctl_cmd"
,
"cn"
:
"ctl_cmd"
}
,
"#cand"
:
[
"check"
,
"forward"
,
"cancel"
,
"exit"
,
"stop"
]
}
}
,
"-o"
:
{
"#desc"
:
{
"en"
:
"Control an active connection multiplexing master process. When the -O option is specified, the ctl_cmd argument is interpreted and passed to the master process. Valid commands are: “check” (check that the master process is running), “forward” (request forwardings without command execution), “cancel” (cancel forwardings), “exit” (request the master to exit), and “stop” (request the master to stop accepting further multiplexing requests)."
,
"cn"
:
"控制一个活动的连接复用主进程。当指定 -O 选项时，ctl_cmd 参数会被解释并传递给主进程。有效的命令有：“check”（检查主进程是否正在运行）、“forward”（请求转发而不执行命令）、“cancel”（取消转发）、“exit”（请求主进程退出）和“stop”（请求主进程停止接受更多的复用请求）。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"ctl_cmd"
,
"cn"
:
"ctl_cmd"
}
,
"#cand"
:
[
"AddKeysToAgent"
,
"AddressFamily"
,
"BatchMode"
,
"BindAddress"
,
"BindInterface"
,
"CanonicalDomains"
,
"CanonicalizeFallbackLocal"
,
"CanonicalizeHostname"
,
"CanonicalizeMaxDots"
,
"CanonicalizePermittedCNAMEs"
,
"CASignatureAlgorithms"
,
"CertificateFile"
,
"ChallengeResponseAuthentication"
,
"CheckHostIP"
,
"Ciphers"
,
"ClearAllForwardings"
,
"Compression"
,
"ConnectionAttempts"
,
"ConnectTimeout"
,
"ControlMaster"
,
"ControlPath"
,
"ControlPersist"
,
"DynamicForward"
,
"EnableSSHKeysign"
,
"EscapeChar"
,
"ExitOnForwardFailure"
,
"FingerprintHash"
,
"ForwardAgent"
,
"ForwardX11"
,
"ForwardX11Timeout"
,
"ForwardX11Trusted"
,
"GatewayPorts"
,
"GlobalKnownHostsFile"
,
"GSSAPIAuthentication"
,
"GSSAPIDelegateCredentials"
,
"HashKnownHosts"
,
"HostbasedAuthentication"
,
"HostbasedKeyTypes"
,
"HostKeyAlgorithms"
,
"HostKeyAlias"
,
"Hostname"
,
"IdentitiesOnly"
,
"IdentityAgent"
,
"IdentityFile"
,
"IgnoreUnknown"
,
"Include"
,
"IPQoS"
,
"KbdInteractiveAuthentication"
,
"KbdInteractiveDevices"
,
"KexAlgorithms"
,
"LocalCommand"
,
"LocalForward"
,
"LogLevel"
,
"MACs"
,
"NoHostAuthenticationForLocalhost"
,
"NumberOfPasswordPrompts"
,
"PasswordAuthentication"
,
"PermitLocalCommand"
,
"PKCS11Provider"
,
"Port"
,
"PreferredAuthentications"
,
"ProxyCommand"
,
"ProxyJump"
,
"ProxyUseFdpass"
,
"PubkeyAcceptedKeyTypes"
,
"PubkeyAuthentication"
,
"RekeyLimit"
,
"RemoteCommand"
,
"RemoteForward"
,
"RequestTTY"
,
"RevokedHostKeys"
,
"SecurityKeyProvider"
,
"SendEnv"
,
"ServerAliveCountMax"
,
"ServerAliveInterval"
,
"SetEnv"
,
"StreamLocalBindMask"
,
"StreamLocalBindUnlink"
,
"StrictHostKeyChecking"
,
"SyslogFacility"
,
"TCPKeepAlive"
,
"Tunnel"
,
"TunnelDevice"
,
"UpdateHostKeys"
,
"User"
,
"UserKnownHostsFile"
,
"VerifyHostKeyDNS"
,
"VisualHostKey"
,
"XAuthLocation"
,
"GSSAPIKeyExchange"
,
"GSSAPIRenewalForcesRekey"
,
"GSSAPIServerIdentity"
,
"GSSAPITrustDns"
,
"SmartcardDevice"
,
"UsePrivilegedPort"
,
"Cipher"
,
"CompressionLevel"
,
"Protocol"
,
"RhostsRSAAuthentication"
,
"RSAAuthentication"
]
}
}
,
"-p"
:
{
"#desc"
:
{
"en"
:
"Port to connect to on the remote host. This can be specified on a per-host basis in the configuration file."
,
"cn"
:
"连接到远程主机的端口。这也可以在配置文件中按主机指定。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"port"
,
"cn"
:
"port"
}
,
"#exec"
:
"___advise_seq 1/65535"
}
}
,
"-Q"
:
{
"#desc"
:
{
"en"
:
"Queries ssh for the algorithms supported for the specified version 2. The available features are: cipher (supported symmetric ciphers), cipher-auth (supported symmetric ciphers that support authenticated encryption), help (supported query terms for use with the -Q flag), mac (supported message integrity codes), kex (key exchange algorithms), kex-gss (GSSAPI key exchange algorithms), key (key types), key-cert (certificate key types), key-plain (non-certificate key types), key-sig (all key types and signature algorithms), protocol-version (supported SSH protocol versions), and sig (supported signature algorithms). Alternatively, any keyword from ssh_config(5) or sshd_config(5) that takes an algorithm list may be used as an alias for the corresponding query_option."
,
"cn"
:
"查询 ssh 支持的算法（版本 2）。可用的特性包括：cipher（支持的对称加密算法）、cipher-auth（支持认证加密的对称加密算法）、help（用于 -Q 标志的支持查询项）、mac（支持的消息完整性码）、kex（密钥交换算法）、kex-gss（GSSAPI 密钥交换算法）、key（密钥类型）、key-cert（证书密钥类型）、key-plain（非证书密钥类型）、key-sig（所有密钥类型和签名算法）、protocol-version（支持的 SSH 协议版本）和 sig（支持的签名算法）。此外，ssh_config(5) 或 sshd_config(5) 中的任何算法列表关键字都可用作相应查询选项的别名。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"query_option"
,
"cn"
:
"query_option"
}
}
}
,
"-R"
:
{
"#desc"
:
{
"en"
:
"Specifies that connections to the given TCP port or Unix socket on the remote (server) host are to be forwarded to the local side. This works by allocating a socket to listen to either a TCP port or to a Unix socket on the remote side. Whenever a connection is made to this port or Unix socket, the connection is forwarded over the secure channel, and a connection is made from the local machine to either an explicit destination specified by host port hostport, or local_socket, or, if no explicit destination was specified, ssh will act as a SOCKS 4/5 proxy and forward connections to the destinations requested by the remote SOCKS client. Port forwardings can also be specified in the configuration file. Privileged ports can be forwarded only when logging in as root on the remote machine. IPv6 addresses can be specified by enclosing the address in square brackets. By default, TCP listening sockets on the server will be bound to the loopback interface only. This may be overridden by specifying a bind_address. An empty bind_address, or the address ‘*’, indicates that the remote socket should listen on all interfaces. Specifying a remote bind_address will only succeed if the server's GatewayPorts option is enabled (see sshd_config(5)). If the port argument is ‘0’, the listen port will be dynamically allocated on the server and reported to the client at run time. When used together with -O forward the allocated port will be printed to the standard output."
,
"cn"
:
"指定将远程（服务器）主机上的给定 TCP 端口或 Unix 套接字的连接转发到本地。通过在远程端分配一个套接字来监听 TCP 端口或 Unix 套接字来实现。每当有连接到此端口或 Unix 套接字时，连接都会通过安全通道转发，并从本地机器建立到主机端口 hostport 或 local_socket 的连接，或者如果没有指定明确的目的地，ssh 将作为 SOCKS 4/5 代理转发连接到远程 SOCKS 客户端请求的目的地。端口转发也可以在配置文件中指定。只有以 root 身份登录远程机器时才能转发特权端口。IPv6 地址可以通过将地址括在方括号中来指定。默认情况下，服务器上的 TCP 监听套接字将仅绑定到回环接口。这可以通过指定 bind_address 来覆盖。空的 bind_address 或地址 ‘*’ 表示远程套接字应监听所有接口。指定远程 bind_address 仅在服务器的 GatewayPorts 选项启用时成功（参见 sshd_config(5)）。如果端口参数为 ‘0’，则监听端口将在服务器上动态分配，并在运行时报告给客户端。与 -O 一起使用时，分配的端口将打印到标准输出。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"[bind_address:]port:host:hostport [bind_address:]port:local_socket remote_socket:host:hostport remote_socket:local_socket [bind_address:]port"
,
"cn"
:
"[bind_address:]port:host:hostport [bind_address:]port:local_socket remote_socket:host:hostport remote_socket:local_socket [bind_address:]port"
}
}
}
,
"-S"
:
{
"#desc"
:
{
"en"
:
"Specifies the location of a control socket for connection sharing, or the string “none” to disable connection sharing. Refer to the description of ControlPath and ControlMaster in ssh_config(5) for details."
,
"cn"
:
"指定连接共享控制套接字的位置，或字符串“none”以禁用连接共享。有关详细信息，请参见 ssh_config(5) 中的 ControlPath 和 ControlMaster 描述。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"ctl_path"
,
"cn"
:
"ctl_path"
}
,
"#exec"
:
"___x_cmd_advise__file"
}
}
,
"-W"
:
{
"#desc"
:
{
"en"
:
"Requests that standard input and output on the client be forwarded to host on port over the secure channel. Implies -N, -T, ExitOnForwardFailure and ClearAllForwardings, though these can be overridden in the configuration file or using -o command line options."
,
"cn"
:
"请求将客户端上的标准输入和输出通过安全通道转发到主机上的端口。这暗示 -N、-T、ExitOnForwardFailure 和 ClearAllForwardings，尽管这些可以在配置文件中或使用 -o 命令行选项进行覆盖。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"host:port"
,
"cn"
:
"host:port"
}
}
}
,
"-w"
:
{
"#desc"
:
{
"en"
:
"Requests tunnel device forwarding with the specified tun(4) devices between the client (local_tun) and the server (remote_tun). The devices may be specified by numerical ID or the keyword “any”, which uses the next available tunnel device. If remote_tun is not specified, it defaults to “any”. See also the Tunnel and TunnelDevice directives in ssh_config(5). If the Tunnel directive is unset, it will be set to the default tunnel mode, which is “point-to-point”. If a different Tunnel forwarding mode is desired, then it should be specified before -w."
,
"cn"
:
"请求在客户端（local_tun）和服务器（remote_tun）之间转发指定的 tun(4) 设备。设备可以通过数字 ID 或关键字 “any” 指定，后者使用下一个可用的隧道设备。如果未指定 remote_tun，则默认为 “any”。另见 ssh_config(5) 中的 Tunnel 和 TunnelDevice 指令。如果未设置 Tunnel 指令，它将设置为默认的隧道模式，即 “点对点”。如果需要不同的隧道转发模式，则应在 -w 之前指定。"
}
,
"#1"
:
{
"#desc"
:
{
"en"
:
"local_tun[:remote_tun]"
,
"cn"
:
"local_tun[:remote_tun]"
}
}
}
}

